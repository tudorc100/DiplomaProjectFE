{"remainingRequest":"/Users/tudorcampan/Desktop/SCOALA/DS/DS2023_30443_Campan_Tudor_Assignment_1_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tudorcampan/Desktop/SCOALA/DS/DS2023_30443_Campan_Tudor_Assignment_1_frontend/src/views/ItemListForUser.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tudorcampan/Desktop/SCOALA/DS/DS2023_30443_Campan_Tudor_Assignment_1_frontend/src/views/ItemListForUser.vue","mtime":1679483917149},{"path":"/Users/tudorcampan/Desktop/SCOALA/DS/DS2023_30443_Campan_Tudor_Assignment_1_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673878691195},{"path":"/Users/tudorcampan/Desktop/SCOALA/DS/DS2023_30443_Campan_Tudor_Assignment_1_frontend/node_modules/babel-loader/lib/index.js","mtime":1673878691174},{"path":"/Users/tudorcampan/Desktop/SCOALA/DS/DS2023_30443_Campan_Tudor_Assignment_1_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673878691195},{"path":"/Users/tudorcampan/Desktop/SCOALA/DS/DS2023_30443_Campan_Tudor_Assignment_1_frontend/node_modules/vue-loader/lib/index.js","mtime":1673878699755}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBhcGkgZnJvbSAiLi4vYXBpIjsKaW1wb3J0IEl0ZW1EaWFsb2cgZnJvbSAiLi4vY29tcG9uZW50cy9JdGVtRGlhbG9nIjsKaW1wb3J0IFNvY2tKUyBmcm9tICJzb2NranMtY2xpZW50IjsKaW1wb3J0IFN0b21wIGZyb20gIndlYnN0b21wLWNsaWVudCIKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiSXRlbUxpc3QiLAogIGNvbXBvbmVudHM6IHsgSXRlbURpYWxvZyB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpdGVtczogW10sCiAgICAgIHJlY2VpdmVkX21lc3NhZ2VzOiBbXSwKICAgICAgc2VuZF9tZXNzYWdlOiBudWxsLAogICAgICBjb25uZWN0ZWQ6ZmFsc2UsCiAgICAgIHNlYXJjaDogIiIsCiAgICAgIGhlYWRlcnM6IFsKICAgICAgICB7CiAgICAgICAgICB0ZXh0OiAiSWQiLAogICAgICAgICAgYWxpZ246ICJzdGFydCIsCiAgICAgICAgICBzb3J0YWJsZTogZmFsc2UsCiAgICAgICAgICB2YWx1ZTogImlkIiwKICAgICAgICB9LAogICAgICAgIHsgdGV4dDogIkRlc2NyaXB0aW9uIiwgdmFsdWU6ICJkZXNjcmlwdGlvbiIgfSwKICAgICAgICB7IHRleHQ6ICJBZGRyZXNzIiwgdmFsdWU6ICJhZGRyZXNzIiB9LAogICAgICAgIHsgdGV4dDogIkNvbnN1bXB0aW9uIiwgdmFsdWU6ICJjb25zdW1wdGlvbiIgfSwKICAgICAgXSwKICAgICAgZGlhbG9nVmlzaWJsZTogZmFsc2UsCiAgICAgIHNlbGVjdGVkSXRlbToge30sCiAgICB9OwogIH0sCiAgbWV0aG9kczogewoKICAgIGFzeW5jIHJlZnJlc2hMaXN0KCkgewogICAgICB0aGlzLmRpYWxvZ1Zpc2libGUgPSBmYWxzZTsKICAgICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSB7fTsKICAgICAgdGhpcy5pdGVtcyA9IGF3YWl0IGFwaS5pdGVtcy5hbGxJdGVtc0ZvclVzZXIoKTsKICAgIH0sCgogIGNvbm5lY3QoKSB7CiAgICB0aGlzLnNvY2tldCA9IG5ldyBTb2NrSlMoImh0dHA6Ly9sb2NhbGhvc3Q6ODA4OC9hcGkvd2Vic29ja2V0Iik7CiAgICB0aGlzLnN0b21wQ2xpZW50ID0gU3RvbXAub3Zlcih0aGlzLnNvY2tldCk7CiAgICB0aGlzLnN0b21wQ2xpZW50LmNvbm5lY3QoCiAgICAgICAge30sCiAgICAgICAgKGZyYW1lKSA9PiB7CiAgICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7CiAgICAgICAgICBjb25zb2xlLmxvZyhmcmFtZSk7CiAgICAgICAgICB0aGlzLnN0b21wQ2xpZW50LnN1YnNjcmliZSgiL3RvcGljIiwgKHRpY2spID0+IHsKICAgICAgICAgICAgY29uc29sZS5sb2codGljayk7CiAgICAgICAgICAgIGNvbnN0IHN0ciA9IHRpY2suYm9keS5zcGxpdCgiOiIpOwogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJ1c2VyIikpLmlkID09PSBOdW1iZXIoc3RyWzBdKQogICAgICAgICAgICApIHsKICAgICAgICAgICAgICBhbGVydCh0aWNrLmJvZHkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMucmVjZWl2ZWRfbWVzc2FnZXMucHVzaChKU09OLnBhcnNlKHRpY2suYm9keSkuY29udGVudCk7CiAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIChlcnJvcikgPT4gewogICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpOwogICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTsKICAgICAgICB9CiAgICApOwogIH0sCiAgZGlzY29ubmVjdCgpIHsKICAgIGlmICh0aGlzLnN0b21wQ2xpZW50KSB7CiAgICAgIHRoaXMuc3RvbXBDbGllbnQuZGlzY29ubmVjdCgpOwogICAgfQogICAgdGhpcy5jb25uZWN0ZWQ9ZmFsc2U7CiAgfSwKICB9LAogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLnJlZnJlc2hMaXN0KCk7CiAgICB0aGlzLmNvbm5lY3QoKTsKICB9LAoKfTsK"},{"version":3,"sources":["ItemListForUser.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"ItemListForUser.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-card>\n    <v-card-title>\n      Devices\n      <v-spacer></v-spacer>\n      <v-text-field\n          v-model=\"search\"\n          append-icon=\"mdi-magnify\"\n          label=\"Search\"\n          single-line\n          hide-details\n      ></v-text-field>\n    </v-card-title>\n    <v-data-table\n        :headers=\"headers\"\n        :items=\"items\"\n        :search=\"search\"\n    ></v-data-table>\n    <ItemDialog\n        :opened=\"dialogVisible\"\n        :item=\"selectedItem\"\n        @refresh=\"refreshList\"\n    ></ItemDialog>\n  </v-card>\n</template>\n\n<script>\nimport api from \"../api\";\nimport ItemDialog from \"../components/ItemDialog\";\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"webstomp-client\"\n\nexport default {\n  name: \"ItemList\",\n  components: { ItemDialog },\n  data() {\n    return {\n      items: [],\n      received_messages: [],\n      send_message: null,\n      connected:false,\n      search: \"\",\n      headers: [\n        {\n          text: \"Id\",\n          align: \"start\",\n          sortable: false,\n          value: \"id\",\n        },\n        { text: \"Description\", value: \"description\" },\n        { text: \"Address\", value: \"address\" },\n        { text: \"Consumption\", value: \"consumption\" },\n      ],\n      dialogVisible: false,\n      selectedItem: {},\n    };\n  },\n  methods: {\n\n    async refreshList() {\n      this.dialogVisible = false;\n      this.selectedItem = {};\n      this.items = await api.items.allItemsForUser();\n    },\n\n  connect() {\n    this.socket = new SockJS(\"http://localhost:8088/api/websocket\");\n    this.stompClient = Stomp.over(this.socket);\n    this.stompClient.connect(\n        {},\n        (frame) => {\n          this.connected = true;\n          console.log(frame);\n          this.stompClient.subscribe(\"/topic\", (tick) => {\n            console.log(tick);\n            const str = tick.body.split(\":\");\n            if (\n                JSON.parse(localStorage.getItem(\"user\")).id === Number(str[0])\n            ) {\n              alert(tick.body);\n            }\n            this.received_messages.push(JSON.parse(tick.body).content);\n          });\n        },\n        (error) => {\n          console.log(error);\n          this.connected = false;\n        }\n    );\n  },\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.disconnect();\n    }\n    this.connected=false;\n  },\n  },\n  created() {\n    this.refreshList();\n    this.connect();\n  },\n\n};\n</script>\n\n<style scoped></style>\n"]}]}